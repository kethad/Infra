pipeline {
     
     agent { label ' USE1-SLAVE-01 || USW2-SLAVE-01 '}
    //agent { label "${params.Slave}" }
    stages {
    
    
        stage('RDS-Parameters-Echo') {
            
             steps {
                
                echo "  ${params.Environment} ${params.REGION} ${params.Database} ${params.STAGES} ${params.BuildNumber} ${params.Slave} "
                 
             }
         }
        stage('RDSCreation') {
            when {
                expression { params.STAGES == 'RDSCreation'  }
            }
            
            steps {
               echo "${params.STAGES} is the Selected Stage"
               rdscft()
               stackvars()
               audit()
               rgn()
               
               //RDSMaster Random Password generation
               echo "executing randompwd function"
               sh " cd ${JENKINS_HOME}/workspace/${Job_Name}/rds/ ;chmod +x random_passwd.py ;./random_passwd.py ${envapp} ${build_number} "
               randompwd()
               
               sh "aws cloudformation create-stack --stack-name ${stackname} --template-body ${TemplateName} --parameters ParameterKey=Environment,ParameterValue=${params.Environment} ParameterKey=Database,ParameterValue=${params.Database} ParameterKey=DBClusterIdentifier,ParameterValue=${DBClusterIdentifier} ParameterKey=DBInstanceIdentifier1,ParameterValue=${DBInstanceIdentifier1} ParameterKey=DBInstanceIdentifier2,ParameterValue=${DBInstanceIdentifier2}  ParameterKey=DBUsername,ParameterValue=${dbusername} ParameterKey=DBPassword,ParameterValue=${randompwd} --capabilities CAPABILITY_NAMED_IAM --region '${region}' --tags Key=Name,Value=${stackname} Key=Environment,Value=${params.Environment} Key=Owner,Value=${params.Database} Key=AppID,Value=${appid} Key=BU,Value=DJI | tr -d {} | awk NF | awk '{print \$2}' > /var/tmp/${envapp}-${build_number}  " 
               STID()
               echo "${STID} is StackID outside STID Function"
               sh " aws cloudformation wait stack-create-complete --region '${region}' --stack-name ${STID}  "
               sh " aws cloudformation describe-stack-events --stack-name  ${stackname} --region '${region}' "
               
               //DynamoDB-Table-Update
               
               sh " sudo chmod +x ${JENKINS_HOME}/workspace/${Job_Name}/rds/mysql_postgresql_nonprod_wrapper.sh "
               sh " ${JENKINS_HOME}/workspace/${Job_Name}/rds/mysql_postgresql_nonprod_wrapper.sh ${stackname} ${region} ${envapp} ${build_number} ${BUILD_USER_MAIL_ID} "
               rdsstackcrvars()
                }
            }
        
         stage('RDSCreationFromSnapshot') {
            when {
                expression { params.STAGES == 'RDSCreationFromSnapshot'  }
            }
            
            steps {
               echo "${params.STAGES} is the Selected Stage"
               rdscft()
               stackvars()
               audit()
               rgn()
               
               sh "aws cloudformation create-stack --stack-name ${stackname} --template-body ${TemplateName} --parameters ParameterKey=Environment,ParameterValue=${params.Environment} ParameterKey=Database,ParameterValue=${params.Database}  ParameterKey=DBClusterIdentifier,ParameterValue=${DBClusterIdentifier} ParameterKey=DBInstanceIdentifier,ParameterValue=${DBInstanceIdentifier}  ParameterKey=DBSnapshotIdentifier,ParameterValue=${snapshot_arn} --capabilities CAPABILITY_NAMED_IAM --region '${region}' --tags Key=Name,Value=${stackname} Key=Environment,Value=${params.Environment} Key=Owner,Value=${params.Database} Key=AppID,Value=${appid} Key=BU,Value=DJI | tr -d {} | awk NF | awk '{print \$2}' > /var/tmp/${envapp}-${build_number}  " 
               STID()
               echo "${STID} is StackID outside STID Function"
               sh " aws cloudformation wait stack-create-complete --region ${region} --stack-name ${STID}  "
               sh " aws cloudformation describe-stack-events --stack-name  ${stackname} --region ${region} "
               
               //DynamoDB-Table-Update
               sh " sudo chmod +x ${JENKINS_HOME}/workspace/${Job_Name}/rds/mysql_postgresql_nonprod_wrapper.sh "
               sh " ${JENKINS_HOME}/workspace/${Job_Name}/rds/mysql_postgresql_nonprod_wrapper.sh ${stackname} ${region} ${envapp} ${build_number} ${BUILD_USER_MAIL_ID} "
               rdsstackcrvars()
                }
              
            }
        
        stage('RDS-DNS-Update') {
            when {
                expression { params.STAGES == 'RDSDNSUpdate'  }
            }
            
            steps {
               echo "${params.STAGES} is the Selected Stage"
               rdscft()
               stackvars()
               //sh "ansible-playbook -i /local/apps/jenkins/scripts/rds_dns/ips /local/apps/jenkins/scripts/rds_dns/rds_dns.yml -e envapp=${envapp} -e build_number=${build_number} ${enginetype} "
               sh "cd ${JENKINS_HOME}/workspace/${Job_Name}/rds/ ; sudo chmod +x RetrieveRDSDNS.py RetrieveBuildInfo.py UpdateRDSDNS.py"
               sh "ansible-playbook -i ${JENKINS_HOME}/workspace/${Job_Name}/rds/inventory ${JENKINS_HOME}/workspace/${Job_Name}/rds/mysql_postgresql_nonprod_rds_dns.yml -e envapp=${envapp} -e build_number=${build_number} -e enginetype=${enginetype}"
               rdsdnsupdate()
                }
            }
            
            
        stage('RDSDeletion') {
            when {
              expression { params.STAGES == 'RDSDeletion' }
            }
            steps {
                rdscft()
                stackvars()
                audit()
                
                sh "cd ${JENKINS_HOME}/workspace/${Job_Name}/rds ; chmod +x del_stack_id.sh"
                //sh " ${JENKINS_HOME}/workspace/${Job_Name}/rds/del_stack_id.sh ${stackname} ${envapp} ${build_number} ${region} "//
                sh "/usr/local/bin/aws cloudformation describe-stacks --region ${region} --stack-name ${stackname} --query 'Stacks[0].StackId' > /var/tmp/${envapp}-${build_number} "
                STID()
      
                sh " sudo chmod +x ${JENKINS_HOME}/workspace/${Job_Name}/rds/mysql_postgresql_nonprod_wrapper.sh "
                sh " ${JENKINS_HOME}/workspace/${Job_Name}/rds/mysql_postgresql_nonprod_wrapper.sh ${stackname} ${region} ${envapp} ${build_number} ${BUILD_USER_MAIL_ID} ${params.STAGES}"
                rdsstackcrvars()
                
                
                sh "/usr/local/bin/aws rds modify-db-cluster --db-cluster-identifier ${DBClusterIdentifier} --no-deletion-protection --region ${region} > /dev/null 2>&1 "
                sh "/usr/local/bin/aws cloudformation delete-stack --stack-name ${stackname} --region '${region}'"
                sh "/usr/local/bin/aws cloudformation wait stack-delete-complete --region '${region}' --stack-name ${STID}  "
               
                }
           }
            
         }
 
 post {
        failure {
        
                 mail to: '*indexinfrastructure@spglobal.com','spaceqa@spglobal.com','spacedev@spglobal.com',
                 subject: "SPDJI RDSStack: New ${params.Environment} RDS Deployment Failed for ${params.Database} APP Build Number ${build_number}",
                 body: "New RDS Deployment Failed for ${params.Environment} Environment ${params.Database} APP, for more details click on the url ${env.BUILD_URL}console"
                
        }
        
        success {
          
           script {
             if ( params.STAGES == 'RDSCreation' ) {
                
                 mail to: 'd.kethavath@spglobal.com,sruthi.tannedi@spglobal.com','spaceqa@spglobal.com','spacedev@spglobal.com',
                 subject: "SPDJI RDSStack: New ${params.Environment} RDS Deployment Completed for ${params.Database} APP BuildNumber ${build_number} - RDS Details are:",
                 body: "${rdsstackcrvars}"
                 
                 mail to: 'IndexInfraMBX@spglobal.com',
                 subject: "SPDJI RDSStack RDSMaster Password of: ${params.Environment} Environment ${params.Database} APP with BuildNumber ${build_number} ",
                 body: "${randompwd} is RDSMaster random password for ${params.Environment} ${params.Database} APP with BuildNumber ${build_number}"
           
               } else if (  params.STAGES == 'RDSDeletion' ) {
              
                   mail to: 'IndexInfraNotifications@spglobal.com','spaceqa@spglobal.com','spacedev@spglobal.com',
                   subject: "SPDJI EC2Stack: New ${environment} VM Deployment, ALB Provisioning Completed for ${params.APP} APP  BuildNumber ${env.BUILD_NUMBER}",
                   body: "New VM Deployment, ALB Provisioning Completed for ${environment} Environment ${params.APP} APP, Instances IP's are ${IPS}, ALB DNS Name is ${ALB_DNS_NAME}, for more details click on the url ${env.BUILD_URL}console" 
               
               } else if (  params.STAGES == 'RDSDNSUpdate' ) {
              
                   mail to: 'd.kethavath@spglobal.com,sruthi.tannedi@spglobal.com,IndexInfraNotifications@spglobal.com','spaceqa@spglobal.com','spacedev@spglobal.com',
                   subject: "SPDJI RDSStack: New ${params.Environment} RDSDNSUpdate Completed for ${params.Database} APP with BuildNumber ${build_number} - Records and EndPoints details in mail body:",
                   body: "${rdsdnsupdate}" 
                   
               } else if (  params.STAGES == 'RDSCreationFromSnapshot' ) {
              
                   mail to: 'IndexInfraNotifications@spglobal.com',
                   subject: "SPDJI RDSStack: New ${params.Environment} RDS Deployment Completed for ${params.Database} APP BuildNumber ${build_number} - RDS Details are:",
                   body: "${rdsstackcrvars}"    
               
               } else {
                   mail to: 'IndexInfraNotifications@spglobal.com',
                   subject: "SPDJI RDSStack: Please provide valid Parameters for: ${params.Environment} Environment ${params.Database} APP",
                   body: "SPDJI RDSStack: Please provide valid Parameters for: ${params.Environment} Environment ${params.Database} APP"
               
               }
           }
        }
    } 
           
 }
          
        void rdscft() {
            script {
                        if ( params.REGION == 'USE1' && params.STAGES == 'RDSCreation'  ) {
                            TemplateName = "file://rds/JenkinsFiles/nonprod-space-rds.yml"
                            echo "${TemplateName} is the cloudformation template name as per the Region and Stage input"
                        }  else if ( params.REGION == 'USE1' && params.STAGES == 'RDSCreationFromSnapshot' ) {
                           TemplateName = "file://rds/JenkinsFiles/nonprod-space-rds-snapshot.yml"
                           echo "${TemplateName} is the cloudformation template name as per the APP Region and Stage input"
                        }
                           else {
                           echo "YOU MUST SELECT THE ONE OF THE APP NAME from the Database Variable"
                        }
                       }
                      }
                      
        
        void rgn() {
            script {
                        if ( params.REGION == 'USE1' ) {
                              RGN="VA"
                              region="us-east-1"
                              echo "${RGN} is Short form of North Virginia"
                        }  else if (  params.REGION == 'USW2' ) {
                             RGN="OR"
                             region="us-west-2"
                             echo "${RGN} is Short form of Oregon"
                        }
                          
                  }
       }
        
        
        
        void randompwd() { 
            
          randompwd = readFile("${JENKINS_HOME}/workspace/${Job_Name}/rds/random_pass-${envapp}-${build_number}")
          //echo "${randompwd} is random password"
        }
        
        void STID() { 
            
          STID = readFile("/var/tmp/${envapp}-${build_number}")
          echo "${STID} is StackID inside STID Function"
        }
        
        
       void rdsstackcrvars() { 
            
          rdsstackcrvars = readFile("${JENKINS_HOME}/workspace/${Job_Name}/rds/${envapp}.cfvars.${build_number}.txt")
          echo "${rdsstackcrvars} are rdsvars inside rdsstackcrvars Function"
        }
        
       void rdsdnsupdate() { 
            
          rdsdnsupdate = readFile("${JENKINS_HOME}/workspace/${Job_Name}/rds/${envapp}.rdsdnsupdate.txt")
          echo "${rdsdnsupdate} are rdsdnsupdate fileoutput inside rdsdnsupdate Function"
        }
        
        void audit() {
             script {
                  wrap([$class: 'BuildUser']) {
                      BUILD_USER="${BUILD_USER}"
                      //echo "${BUILD_USER} is build user name"
                      BUILD_USER_MAIL_ID="${BUILD_USER_EMAIL}"
                      //echo "${BUILD_USER_EMAIL} is build user mail id"
                  }  
       
             }
        }
        
        
        void stackvars() {
            script {
                        
                      if ( params.BuildNumber == '' ){  
                          rgn()
                          build_number="${currentBuild.number}"
                          envapp="${params.Environment}-${params.REGION}-${params.Database}"
                          echo "${envapp} is the Enviroment-Region-APPName"
                          echo "${build_number} is defaut buildnumber of the job"
                          stackname="${envapp}-RDS-CF-Stack-${build_number}"
                          echo "${stackname} is the STACKNAME"
                          dbusername="rdsmstr"
                          echo "${dbusername} is dbusername"
                          dbpassword="Rdsmstr_4378"
                          //echo "${dbpassword} is dbpassword"
                          DBClusterIdentifier="${envapp}-aurora-postgresql-cluster-${build_number}"
                          echo "${DBClusterIdentifier} is db cluster identifer"
                          DBInstanceIdentifier1="${envapp}-aurora-postgresql-instance-${currentBuild.number}-01"
                          DBInstanceIdentifier2="${envapp}-aurora-postgresql-instance-${currentBuild.number}-02"
                          echo "${DBInstanceIdentifier1} is dbidentifier"
                          echo "${DBInstanceIdentifier2} is dbidentifier"
                          //dbclidentifier="${envapp}-aurora-postgresql-cluster-${build_number}"
                          //echo "${dbclidentifier} is db cluster identifer"
                          enginetype="aurora-postgresql"
                          echo "${enginetype} is enginetype"
                          appid="0BB43A0E-1B37-0D90-6329-11B7B04BCB63"
                          snapshot_arn="${params.InputSnapshotARN}"
                          echo "$snapshot_arn"
                      } else {   
                      
                         rgn()
                          build_number="${params.BuildNumber}"
                          envapp="${params.Environment}-${params.REGION}-${params.Database}"
                          echo "${envapp} is the Enviroment-Region-APPName"
                          echo "${build_number} is defaut buildnumber of the job"
                          stackname="${envapp}-RDS-CF-Stack-${build_number}"
                          echo "${stackname} is the STACKNAME"
                          dbusername="rdsmstr"
                          echo "${dbusername} is dbusername"
                          dbpassword="Rdsmstr_4378"
                          //echo "${dbpassword} is dbpassword"
                          DBClusterIdentifier="${envapp}-aurora-postgresql-cluster-${build_number}"
                          echo "${DBClusterIdentifier} is db cluster identifer"
                          DBInstanceIdentifier1="${envapp}-aurora-postgresql-instance-${currentBuild.number}-01"
                          DBInstanceIdentifier2="${envapp}-aurora-postgresql-instance-${currentBuild.number}-02"
                          echo "${DBInstanceIdentifier1} is dbidentifier"
                          echo "${DBInstanceIdentifier2} is dbidentifier"
                          //dbclidentifier="${envapp}-aurora-postgresql-cluster-${build_number}"
                          //echo "${dbclidentifier} is db cluster identifer"
                          enginetype="aurora-postgresql"
                          echo "${enginetype} is enginetype"
                          appid="0BB43A0E-1B37-0D90-6329-11B7B04BCB63"
                          snapshot_arn="${params.InputSnapshotARN}"
                          echo "$snapshot_arn"
                      }              
                   
                }          

}
